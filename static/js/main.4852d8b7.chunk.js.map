{"version":3,"sources":["properties/card.js","properties/resultList.js","properties/savedList.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","key","this","props","cardId","onClick","delEvent","style","backgroundColor","logoBgColor","src","logo","width","height","alt","mainImage","price","Component","ResultList","state","loading","AddProperty","index","e","property","Object","assign","splice","setState","RemoveProperty","fetch","response","json","data","console","log","ResultData","map","PropertyDetail","id","agency","brandingColors","primary","bind","SavedList","SavedData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w9CA6BeA,E,iLAzBX,OACE,yBAAKC,UAAU,OAAOC,IAAKC,KAAKC,MAAMC,QACpC,yBAAKJ,UAAU,WACb,4BAAQK,QAASH,KAAKC,MAAMG,UAA5B,UAEF,yBACEN,UAAU,OACVO,MAAO,CAAEC,gBAAiBN,KAAKC,MAAMM,cAErC,yBACEC,IAAKR,KAAKC,MAAMQ,KAChBC,MAAM,OACNC,OAAO,OACPC,IAAI,cAGR,yBAAKd,UAAU,cACb,yBAAKU,IAAKR,KAAKC,MAAMY,UAAWD,IAAI,cAEtC,yBAAKd,UAAU,SAASE,KAAKC,MAAMa,Y,GArBxBC,aCiDJC,E,2MA9CbC,MAAQ,CACNC,SAAS,G,EAWXC,YAAc,SAACC,EAAOC,GACpB,IAAMC,EAAWC,OAAOC,OAAO,GAAI,EAAKP,OACxCK,EAASG,OAAOL,EAAO,GACvB,EAAKM,SAAS,CAAEJ,SAAUA,K,EAG5BK,eAAiB,a,2MAbH,sB,SACWC,MADX,uB,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,QAAQC,IAAIF,GACZ/B,KAAK0B,SAASK,G,qIAWN,IAAD,OACP,OACE,6BACG/B,KAAKiB,MAAMC,QACV,4CAEA,6BACGgB,EAAWC,KAAI,SAACC,EAAgBhB,GAC/B,OACE,kBAAC,EAAD,CACErB,IAAKqC,EAAeC,GACpB9B,YAAa6B,EAAeE,OAAOC,eAAeC,QAClD3B,UAAWuB,EAAevB,UAC1BJ,KAAM2B,EAAeE,OAAO7B,KAC5BK,MAAOsB,EAAetB,MACtBV,SAAU,EAAKe,YAAYsB,KAAK,EAAMrB,c,GApC/BL,a,QCoBV2B,E,iLAlBX,OACE,6BACGC,EAAUR,KAAI,SAACC,EAAgBhB,GAC9B,OACE,kBAAC,EAAD,CACErB,IAAKqC,EAAeC,GACpB9B,YAAa6B,EAAeE,OAAOC,eAAeC,QAClD3B,UAAWuB,EAAevB,UAC1BJ,KAAM2B,EAAeE,OAAO7B,KAC5BK,MAAOsB,EAAetB,gB,GAXZC,a,MCmBT6B,MAlBf,WACE,OACE,yBAAK9C,UAAU,kBACb,gDACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,oBACb,wCACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,kDACA,kBAAC,EAAD,UCJU+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4852d8b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card\" key={this.props.cardId}>\r\n        <div className=\"overlay\">\r\n          <button onClick={this.props.delEvent}> Add </button>\r\n        </div>\r\n        <div\r\n          className=\"logo\"\r\n          style={{ backgroundColor: this.props.logoBgColor }}\r\n        >\r\n          <img\r\n            src={this.props.logo}\r\n            width=\"80px\"\r\n            height=\"30px\"\r\n            alt=\"property\"\r\n          />\r\n        </div>\r\n        <div className=\"main-image\">\r\n          <img src={this.props.mainImage} alt=\"property\" />\r\n        </div>\r\n        <div className=\"price\">{this.props.price}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport ResultData from \"../data/result.json\";\r\nimport Card from \"./card\";\r\n\r\nclass ResultList extends Component {\r\n  state = {\r\n    loading: false\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const url = \"../data/result.json\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    this.setState(data);\r\n  }\r\n\r\n  AddProperty = (index, e) => {\r\n    const property = Object.assign([], this.state);\r\n    property.splice(index, 1);\r\n    this.setState({ property: property });\r\n  };\r\n\r\n  RemoveProperty = () => {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading ? (\r\n          <div> loading...</div>\r\n        ) : (\r\n          <div>\r\n            {ResultData.map((PropertyDetail, index) => {\r\n              return (\r\n                <Card\r\n                  key={PropertyDetail.id}\r\n                  logoBgColor={PropertyDetail.agency.brandingColors.primary}\r\n                  mainImage={PropertyDetail.mainImage}\r\n                  logo={PropertyDetail.agency.logo}\r\n                  price={PropertyDetail.price}\r\n                  delEvent={this.AddProperty.bind(this, index)}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResultList;\r\n","import React, { Component } from \"react\";\r\nimport SavedData from \"../data/savedProperties.json\";\r\nimport Card from \"./card\";\r\n\r\nclass SavedList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {SavedData.map((PropertyDetail, index) => {\r\n          return (\r\n            <Card\r\n              key={PropertyDetail.id}\r\n              logoBgColor={PropertyDetail.agency.brandingColors.primary}\r\n              mainImage={PropertyDetail.mainImage}\r\n              logo={PropertyDetail.agency.logo}\r\n              price={PropertyDetail.price}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SavedList;\r\n","import React from \"react\";\nimport ResultList from \"./properties/resultList\";\nimport SavedList from \"./properties/savedList\";\nimport \"./Styles.css\";\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <h1> REA Assignment </h1>\n      <div className=\"list-container\">\n        <div className=\"result-container\">\n          <h2> Result </h2>\n          <ResultList />\n        </div>\n        <div className=\"saved-container\">\n          <h2> Saved Properties </h2>\n          <SavedList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}