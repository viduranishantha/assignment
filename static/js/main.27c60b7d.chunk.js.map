{"version":3,"sources":["components/card.js","components/PropertyListContainer.js","App.js","serviceWorker.js","index.js"],"names":["Card","this","props","listType","onClick","delEvent","propertyId","addEvent","logoBgColor","logo","mainImage","price","className","style","backgroundColor","renderButtons","src","width","height","alt","Component","PropertyListContainer","AddProperty","index","e","activeIndex","activeProperty","state","results","saved","mergeList","setState","Object","assign","splice","DelProperty","p","console","log","PropertyData","map","Property","key","id","agency","brandingColors","primary","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27c60b7d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  renderButtons() {\r\n    // console.log(this.props.listType === savedList);\r\n\r\n    if (this.props.listType === \"savedList\")\r\n      return (\r\n        <button onClick={() => this.props.delEvent(this.props.propertyId)}>\r\n          Remove Property\r\n        </button>\r\n      );\r\n    return (\r\n      <button onClick={() => this.props.addEvent(this.props.propertyId)}>\r\n        Add Property\r\n      </button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      logoBgColor,\r\n      propertyId,\r\n      logo,\r\n      mainImage,\r\n      price,\r\n      delEvent,\r\n      addEvent,\r\n      listType\r\n    } = this.props;\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"overlay\"></div>\r\n        <div className=\"logo\" style={{ backgroundColor: logoBgColor }}>\r\n          {this.renderButtons()}\r\n\r\n          <img src={logo} width=\"80px\" height=\"30px\" alt=\"property\" />\r\n          <div>{propertyId} </div>\r\n        </div>\r\n        <div className=\"main-image\">\r\n          <img src={mainImage} alt=\"property\" />\r\n        </div>\r\n        <div className=\"price\">{price}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport PropertyData from \"../data/data.json\";\r\nimport Card from \"./card\";\r\n\r\nclass PropertyListContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      results: PropertyData.results,\r\n      saved: PropertyData.saved\r\n    };\r\n    // console.log(this.state);\r\n  }\r\n\r\n  //   AddProperty = propertyId => {};\r\n  AddProperty = (index, e) => {\r\n    const activeIndex = index;\r\n    const activeProperty = [this.state.results[activeIndex]];\r\n    const saved = this.state.saved;\r\n    const mergeList = [...saved, ...activeProperty];\r\n    this.setState({ saved: mergeList });\r\n    const results = Object.assign([], this.state.results);\r\n    results.splice(activeIndex, 1);\r\n    this.setState({ results: results });\r\n    // console.log(index);\r\n  };\r\n\r\n  DelProperty = (index, p) => {\r\n    console.log(index);\r\n    const activeProperty = [this.state.saved[index]];\r\n    const results = this.state.results;\r\n    const mergeList = [...results, ...activeProperty];\r\n    this.setState({ results: mergeList });\r\n    const saved = Object.assign([], this.state.saved);\r\n    saved.splice(index, 1);\r\n    this.setState({ saved: saved });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <h1> REA Assignment </h1>\r\n        <div className=\"list-container\">\r\n          <div className=\"result-container\">\r\n            <h2> Result </h2>\r\n            {this.state.results.map((Property, index) => {\r\n              return (\r\n                <Card\r\n                  key={Property.id}\r\n                  listType=\"resultResult\"\r\n                  propertyId={Property.id}\r\n                  logoBgColor={Property.agency.brandingColors.primary}\r\n                  mainImage={Property.mainImage}\r\n                  logo={Property.agency.logo}\r\n                  price={Property.price}\r\n                  addEvent={this.AddProperty.bind(this, index)}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"saved-container\">\r\n            <h2> Saved Properties </h2>\r\n            {this.state.saved.map((Property, index) => {\r\n              return (\r\n                <Card\r\n                  key={Property.id}\r\n                  listType=\"savedList\"\r\n                  propertyId={Property.id}\r\n                  logoBgColor={Property.agency.brandingColors.primary}\r\n                  mainImage={Property.mainImage}\r\n                  logo={Property.agency.logo}\r\n                  price={Property.price}\r\n                  delEvent={this.DelProperty.bind(this, index)}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PropertyListContainer;\r\n","import React from \"react\";\r\nimport PropertyListContainer from \"./components/PropertyListContainer\";\r\n\r\nfunction App() {\r\n  return <PropertyListContainer />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./Styles.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}